@{
    ViewBag.Title = "Main_Project";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="blog-post">
    <h3>
        Project<small> 2015/9/4 <a href="javascript:void(0)">李晨</a></small>
    </h3>
    <p>
        前面说完了数据库，那么现在说说项目<br/>
        只要是个项目无论是在策划,实施,编码,测试,收尾,更改,这些阶段都应该认认真真,从大体出发,这样无论是对内(个人编码)还是对外(项目完美程度)都好！
    </p>
    <p>
        虽然经验告诉我们,项目不可能百分百完美,但是我相信从这些角度出发能够极大的改善用户体验.(以下为我总结,可能有不足.)
    </p>
    <ol>
        <li>统一的命名规范</li>
        <li>资源文件分类</li>
        <li>技术预测</li>
        <li>风格统一化</li>
        <li>项目及时更新</li>
        <li>一次性完成项目</li>
    </ol>
</div>
<hr/>
<div class="blog-post">
    <h3>
        统一的命名规范<small>2015/9/4<a href="javascript:void(0)">李晨</a></small>
    </h3>
    <p>
        在大神的眼里命名规范好,能省略一晚行注释,往往他们能从名字就能看出作用<br/>
        在新手的眼里恨不得每一行一个注释,告诉他这代码是干嘛的.<br/>
        可是这是不可能的,以C#越来越丰富的语法来说,可能一行简单的代码需要注释个10行<br/>
        注释少,新手看不懂,注释多画面太美不敢看.这个只能用命名规范来解决.
        在这里有一个通用的命名规范,相信按着这个用个一两个月大家也能一眼看出“哪个变量是什么类型”,而功能命名只能靠团队磨合或者定制了：
        <img src="#"/>
    </p>
</div>
<hr/>
<div class="blog-post">
    <h3>
        资源文件分类<small>2015/9/4<a href="javascript:void(0)">李晨</a></small>
    </h3>
    <p>
        合理的分配资源文件夹不仅仅可以避免程序员在编码时乱放的问题,还能再新加入程序员时大方的给他一份清单告诉他,本团队可是一流的,不是外面阿猫阿狗公司就能战胜的.诸如此类的话语.同时还能减少新入程序员的适应时间.
    </p>
    <p>
        这里的资源文件夹分类不单单指网站的用户资源(例如:上传的图片)<br/>
        而是指网站所涉及到的所有资源(例如:Controllers,View,用户上传的东西,ViewModel等等)<br/>
        这样分类会造成一个namespace的问题：
    </p>
    <img src="~/Image/Project.png"/>
    <img src="~/Image/Project1.png"/>
    <p>
        在同一大功能下的文件夹下有不同的小功能模块,这些小功能模块执行着各自的功能却又彼此之间相互联系,这种分类之后造成的编码问题可以这样解决
    </p>
    <p>在VS中选中子文件夹右键并点击属性</p>
    <img src="~/Image/Project2.png"/>
    <p>将箭头选中的属性改为false,然后将子文件夹的namespace改为和母文件夹一样就行了</p>
</div>
<hr/>
<div class="blog-post">
    <h3>
        技术预测<small>2015/9/4<a href="javascript:void(0)">李晨</a></small>
    </h3>
    <p>
        对于一个架构师来说这是个必不可少的技能,这样的技能能避免项目滞后.
        <b>我觉得这在学校里也是组长的一个必备技能</b>
    </p>
    <p>
        但这并非不关团队的其他成员的事,技术预测在公司中(特别是小公司)往往是单方面的:大神预测小鬼实施,然而并非每次预测都能毫无破绽,假如你也拥有这项技能,前途不可限量.
    </p>
</div>
<hr/>
<div class="blog-post">
    <h3>
        风格统一化<small>2015/9/4<a href="javascript:void(0)">李晨</a></small>
    </h3>
    <p>这个在大公司是美工和前端的事,小公司需要自己把握了.</p>
</div>
<hr/>
<div class="blog-post">
    <h3>
        项目及时更新<small>2015/9/4<a href="javascript:void(0)">李晨</a></small>
    </h3>
    <p>更新能避免大错,在学校中应该开放个服务器用于Git什么的,退而求其次,每个小组可以用GitHub来完成实时更新,土豪者租个服务器也没什么嘛</p>
</div>
<hr/>
<div class="blog-post">
    <h3>
        一次性完成项目<small>2015/9/4<a href="javascript:void(0)">李晨</a></small>
    </h3>
    <p>程序员最烦的就是改需求了,特别是在不好的写作习惯下,看自己以前的代码就是画面太美.虽然此条在实际中很不实际,单每个项目都有变通之法就算需求更改也无伤大雅</p>
    <p>最好的解决方案就是写多分方法(不要乱分)在需求修改时只需要改对应的方法即可</p>
</div>
<hr/>
<nav>
    <ul class="pager">
        <li><a href="@Url.Action("Index", "Main")"><span class="glyphicon glyphicon-arrow-left"></span> 上一页</a></li>
        <li><a href="@Url.Action("Main_Project", "Main")">下一页 <span class="glyphicon glyphicon-arrow-right"></span></a></li>
    </ul>
</nav>